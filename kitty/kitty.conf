# vim:ft=kitty

include themes.conf

# Special modifier key alias for default shortcuts. You can change the value of
# this option to alter all default shortcuts that use kitty_mod.
kitty_mod cmd

# Enable shell integration on supported shells. This enables features such as
# jumping to previous prompts, browsing the output of the previous command in a
# pager, etc. on supported shells. Set to disabled to turn off shell
# integration, completely. It is also possible to disable individual features,
# set to a space separated list of these values: no-rc, no-cursor, no-title,
# no-cwd, no-prompt-mark, no-complete. See Shell integration for details.
shell_integration no-title

# The interval to periodically check if an update to kitty is available (in
# hours). If an update is found, a system notification is displayed informing
# you of the available update. The default is to check every 24 hours, set to
# zero to disable. Update checking is only done by the official binary builds.
# Distro packages or source builds do not do update checking. Changing this
# option by reloading the config is not supported.
update_check_interval 0

# The colorspace in which to interpret terminal colors. The default of srgb will
# cause colors to match those seen in web browsers. The value of default will
# use whatever the native colorspace of the display is. The value of displayp3
# will use Apple‚Äôs special snowflake display P3 color space, which will result
# in over saturated (brighter) colors with some color shift. Reloading
# configuration will change this value only for newly created OS windows.
macos_colorspace displayp3

# Use the Option key as an Alt key on macOS. With this set to no, kitty will use
# the macOS native Option+Key to enter Unicode character behavior. This will
# break any Alt+Key keyboard shortcuts in your terminal programs, but you can
# use the macOS Unicode input technique. You can use the values: left, right or
# both to use only the left, right or both Option keys as Alt, instead. Note
# that kitty itself always treats Option the same as Alt. This means you cannot
# use this option to configure different kitty shortcuts for Option+Key vs.
# Alt+Key. Also, any kitty shortcuts using Option/Alt+Key will take priority, so
# that any such key presses will not be passed to terminal programs running
# inside kitty. Changing this option by reloading the config is not supported.
macos_option_as_alt yes

# Copy to clipboard or a private buffer on select. With this set to clipboard,
# selecting text with the mouse will cause the text to be copied to clipboard.
# Useful on platforms such as macOS that do not have the concept of primary
# selection. You can instead specify a name such as a1 to copy to a private
# kitty buffer. Map a shortcut with the paste_from_buffer action to paste from
# this private buffer. For example:
#   copy_on_select a1
#   map shift+cmd+v paste_from_buffer a1
copy_on_select yes

# The enabled window layouts. A comma separated list of layout names. The
# special value all means all layouts. The first listed layout will be used as
# the startup layout. Default configuration is all layouts in alphabetical
# order. For a list of available layouts, see the Layouts.
enabled_layouts tall

# Tab bar
tab_bar_min_tabs            1
tab_bar_edge                bottom
tab_bar_style               powerline
tab_powerline_style         slanted

# tab title template tailored to catppuccin-mocha
tab_title_template "{index}:{fmt.fg._fab387}{tab.active_exe}{fmt.fg.tab}:{fmt.fg._89b4fa}{tab.active_wd.rsplit('/', 1)[1]}"
active_tab_title_template "{index}:{fmt.fg._181825}{tab.active_exe}{fmt.fg.tab}:{tab.active_wd.rsplit('/', 1)[1]}"

# Fonts
font_size 12.0

font_family      Jetbrains Mono Nerd Font
bold_font        Jetbrains Mono Nerd Font Bold
italic_font      Jetbrains Mono Nerd Font Italic
bold_italic_font Jetbrains Mono Nerd Font Bold Italic

# Cursor
cursor_shape block
cursor_blink_interval 0

# Open tabs and windows in the same folder
map kitty_mod+enter new_window_with_cwd
map kitty_mod+t new_tab_with_cwd

# Move a window into a new tab
map kitty_mod+x detach_window new-tab

# Jump to tabs
map kitty_mod+1 goto_tab 1
map kitty_mod+2 goto_tab 2
map kitty_mod+3 goto_tab 3
map kitty_mod+4 goto_tab 4
map kitty_mod+5 goto_tab 5
map kitty_mod+6 goto_tab 6
map kitty_mod+7 goto_tab 7
map kitty_mod+8 goto_tab 8
map kitty_mod+9 goto_tab 9

# disable cmd+W window close
map cmd+w no_op üçé
map kitty_mod+w no_op

# }}}
